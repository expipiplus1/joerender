float4 red   = float4(0.85, 0.29, 0.29, 1.0);
float4 green = float4(0xFF/(255*2.), 0.85, 0.29, 1.0);
float4 blue  = float4(0.49, 0.65, 0.85, 1.0);

float4 GetColor( const string color_string )
{
    return color_string == "blue" ? blue : red;
}

in varying float4 position : POSITION;
in varying float4 wpos : WPOS;
out varying float depth : DEPTH;

//in varying float4 color;
//in varying float in_a;

const uniform bool b = true;

float4 VertexMain() : POSITION
{
    return position;
}

float4 Green();

float4 MysteryColor()
{
    return wpos / float4( 640, 480, 1 , 1);
    return Green();
}

float4 Green()
{
    return green;
}

float4 PixelMain( int a, float4 my_color ) : COLOR
{
    depth = b ? 0 : 1;
    return MysteryColor() + my_color;// + color;
}

technique clear_blue
{
    pass
    {
        pixel_shader = compile PixelMain( 4+3%int(99.0),
                                          /*color*/ + float4(0.1f,0.1f,0.1f,0.1f) );
        vertex_shader = compile VertexMain();
        clear_color = GetColor( "blue" );
        clear = COLOR;
    }
}
