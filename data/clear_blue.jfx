
//------------------------------------------------------------------------------
// 'Useful' functions and constants
//------------------------------------------------------------------------------
const uniform float3 red; // this is given as a uniform
const   float3 green = float3(0.44, 0.85, 0.29);
const   float3 blue  = float3(0.49, 0.65, 0.85);
const   float3 black = float3(0,0,0);

float3 GetColor( const string color_string )
{
    return color_string == "blue"  ? blue  :
           color_string == "red"   ? red   :
           color_string == "green" ? green :
           black;
}

//------------------------------------------------------------------------------
// Shared vertex inputs
//------------------------------------------------------------------------------

in varying float4 position : POSITION;

//------------------------------------------------------------------------------
// Spinning triangle drawing
//------------------------------------------------------------------------------

const uniform float3x3 rotate;
const uniform float3x3 mirror;
const float3x3 identity = float3x3(1,1,1);

float4 VertexMain( bool flip ) : POSITION
{
    return float4( mul( flip ? mirror : identity,
                        mul( rotate, position.xyz ) ), 1);
}

float4 PixelMain( bool b ) : COLOR
{
    return float4( b ? red : blue, 0.5 );
}

//------------------------------------------------------------------------------
// Background pattern
//------------------------------------------------------------------------------

const uniform int2 window_size;
in varying float4 wpos : WPOS;
in varying int    vertex_id : VERTEXID;

float2 WindowPosition()
{
    return wpos.xy / window_size;
}

float4 VertexBackground() : POSITION
{
    return float4(float2((vertex_id << 1) & 2, vertex_id & 2) * float2(2,-2) + float2(-1,1), 0, 1);
}

float4 PixelBackground() : COLOR
{
    return float4( 1, WindowPosition(), 1 );
}

//------------------------------------------------------------------------------
// The technique
//------------------------------------------------------------------------------

technique clear_blue
{
    //
    // A pass to clear the background
    //
    pass clear
    {
        //
        // Why clear when you can draw a background
        //
        //clear_color = float4( blue, 0 );
        //clear = COLOR;
        pixel_shader  = compile PixelBackground();
        vertex_shader = compile VertexBackground();
        render_fullscreen = true;
    }
    
    //
    // Draw a triangle without mirroring it
    //
    pass first_triangle
    {
        pixel_shader = compile PixelMain( true );
        vertex_shader = compile VertexMain( false );

        render_triangle = true;
    }
    
    //
    // Draw a triangle with mirroring
    //
    pass second_triangle
    {
        //
        // Blend this triangle
        //
        blend_enable = true;
        blend_equation = ADD;
        blend_func = uint2(SRC_ALPHA, ONE_MINUS_SRC_ALPHA);

        pixel_shader = compile PixelMain( false );
        // flip this triangle in x
        vertex_shader = compile VertexMain( true );

        render_triangle = true;
    }
}
